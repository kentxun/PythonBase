
这个项目是 和同学一起做准备参加竞赛的项目，同学师门项目里的一部分拿出来做的改动。

项目主要是实现视频、电话、短信三种业务集中在同一个平台上，通过同一个控制软件实现。
我参与的主要是视频这一块的开发，以及各种终端设备的注册网页的实现。

视频这里的构想是： 先在电视上播放视频，当有事情离开时能够无缝将视频切换到手机上或者其他终端上，不影响工作继续

终端设备包括： 手机、平板、电视、PC、笔记本等
远程控制器，是在 一个安卓手机上，一个同学写的一个类似遥控器的功能
服务器用的是 centos的服务器

视频这里，主要是利用python做了流媒体服务器，流媒体服务器依赖于vlc这个开源的播放软件来实现
vlc可以通过命令行播放视频，也可以通过vlc命令将视频流发向指定的ip
命令
vlc /home/mobicents/sample1.mp4 --sout udp:192.168.1.107 --ttl 12 --loop
将这个视频，播放到指定的服务器上

Python写了控制平台，实现了 播放、暂停、切换播放终端几个功能

控制平台是一个socket服务器监听网关发来控制器的命令，然后根据命令进行相应的操作

----------------------
问题： 多终端切换的构想是无缝切换，所以期望是较低切换时延和播放低卡顿
实验发现不仅切换停顿时间较长，而且播放有一定的卡顿。

排查问题：
原来利用VLC的命令行和串流功能直接进行转发，所有的流转发都是通过vlc这个开源软件实现的，
vlc的开源软件版本的传输质量不太好，而且在Linux上存在使用也有卡顿的情况。
在切换的时候，通过vlc的命令无法在1s内切换过去。

解决方法：
通过重新设计方案，通过自己写代理对视频流进行转发取代借助VLC串流方式，从而降低了切换延迟，同时减少画面卡顿。
实现方式就在 udp_proxy 里，两个类，一个iostream是来处理流，另一个是进行代理的。

收获：
转换了解决问题的思路，不仅仅依赖于对已有车子的使用，
还尽量考虑多一点能尽量利用轮子。同时在重写代理时，增加了Python队列和网络编程的使用，进一步熟悉了这部分。



----------
终端这册功能实现：
2、通过Flask写了个设备注册的网页，通过sqlAlchemy将网页信息传递到后台数据库里。
